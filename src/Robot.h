// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef _ROBOT_H
#define _ROBOT_H

#include "string.h"
#include "WPILib.h"
#include "Commands/Command.h"
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

//include the other .h files for possible commands
#include "Commands/AutoDrive.h"
#include "Commands/AutoDrive2.h"
#include "Commands/BackwardsGyroAuto.h"
#include "Commands/ShootAuto.h"
#include "Commands/LowGoalAutonomous.h"
#include "Commands/CommandGroup1.h"
#include "Commands/Turn.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/AutonomousCommand.h"
#include "Subsystems/Cameras.h"
#include "Subsystems/Catapult.h"
#include "Subsystems/Drivetrain.h"
#include "Subsystems/Roller.h"
#include "Subsystems/Wrist.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "OI.h"

class Robot : public IterativeRobot {
public:
	//Command* autonmousCommand;
	std::unique_ptr<Command> autonomousCommand;
	static std::unique_ptr<OI> oi;
	LiveWindow *lw = LiveWindow::GetInstance();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    static std::shared_ptr<Drivetrain> drivetrain;
    static std::shared_ptr<Roller> roller;
    static std::shared_ptr<Wrist> wrist;
    static std::shared_ptr<Catapult> catapult;
    static std::shared_ptr<Cameras> cameras;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    //static std::shared_ptr<SendableChooser> AutoModes;
    SendableChooser* AutoModes;

    double power;
  	double kP;
   	double AutoTime;
   	double TurnAngle;

	virtual void RobotInit();
	virtual void DisabledInit();
	virtual void DisabledPeriodic();
	virtual void AutonomousInit();
	virtual void AutonomousPeriodic();
	virtual void TeleopInit();
	virtual void TeleopPeriodic();
	virtual void TestPeriodic();
};
#endif
