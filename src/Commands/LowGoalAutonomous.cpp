// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "LowGoalAutonomous.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

LowGoalAutonomous::LowGoalAutonomous(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void LowGoalAutonomous::Initialize() //SD represents smartdashboard
{
	speed = Robot::drivetrain->GetPower(); //sets the power the motors give to drive
	correction = Robot::drivetrain->GetkP(); //the correction factor multiplied to reduce margin for error
	duration = Robot::drivetrain->GetAutoTime(); //takes the user input from SD for defense runtime
	delay = Robot::drivetrain->GetDelay(); //takes user input from SD for an extended period for auto runtime
	position = Robot::drivetrain->GetDirection(); //uses the gyro to move bot's angle towards tower

	SetTimeout(4.000); // creates total time before timeout for ran code

	Robot::drivetrain->ResetGyro(); //resets the gyro's understanding of 0 degrees to current angle
}

// Called repeatedly when this Command is scheduled to run
void LowGoalAutonomous::Execute()
{
	if(IsTimedOut())
	{
		Robot::drivetrain->AutoGyroDrive(.650, correction);
	}
	else
	{
		Robot::drivetrain->AutoGyroDrive(speed, correction);
	}
}

// Make this return true when this Command no longer needs to run execute()
bool LowGoalAutonomous::IsFinished()
{
    return (IsTimedOut() && Robot::drivetrain->GetDistance() < 28.000);
    //Robot::wrist->UpWristState();
}

// Called once after isFinished returns true
void LowGoalAutonomous::End() {
	/*Robot::drivetrain->Turn(position);
	//Wait(3.655);
	Wait(3.428);
	*/
	//Robot::wrist->UpWristState();

	Robot::drivetrain->Stop();
	Robot::drivetrain->ResetGyro();
	Wait(0.500);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void LowGoalAutonomous::Interrupted() {
	Robot::drivetrain->Stop();
}
