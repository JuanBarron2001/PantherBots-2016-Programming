// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ShootAuto.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ShootAuto::ShootAuto(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void ShootAuto::Initialize() 
{
	//initializes the variables to their values
	speed = Robot::drivetrain->GetPower();
	correction = Robot::drivetrain->GetkP();
	duration = Robot::drivetrain->GetAutoTime();

	SetTimeout(duration); // user input to change time run
	
	//Resets gyro and moves wrist down
	Robot::drivetrain->ResetGyro();
	Robot::wrist->DownWristState();

}

// Called repeatedly when this Command is scheduled to run
void ShootAuto::Execute() {
	Robot::drivetrain->BackwardsAuto(speed, correction); //gives speed and correction to gyro to stabalize
}

// Make this return true when this Command no longer needs to run execute()
bool ShootAuto::IsFinished() {
    return IsTimedOut();
}

// Called once after isFinished returns true
void ShootAuto::End() {
	/*
	std::string turn = Robot::drivetrain->GetDirection();
	Robot::drivetrain->Turn(turn);
	Wait(.5);
	Robot::drivetrain->Stop();
	Wait(.3);
	Robot::catapult->Shoot();
	*/
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ShootAuto::Interrupted() {
	Robot::drivetrain->Stop(); //similar to 'End();' as a fail safe mechanism
}
