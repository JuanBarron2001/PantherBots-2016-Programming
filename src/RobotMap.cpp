//RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::drivetrainLeftTop;
std::shared_ptr<SpeedController> RobotMap::drivetrainLeftBottom;
std::shared_ptr<SpeedController> RobotMap::drivetrainRightTop;
std::shared_ptr<SpeedController> RobotMap::drivetrainRightBottom;
std::shared_ptr<RobotDrive> RobotMap::drivetrainRobotDrive;
std::shared_ptr<AnalogGyro> RobotMap::drivetrainGyroUseless;
std::shared_ptr<Compressor> RobotMap::drivetrainComp;
std::shared_ptr<Relay> RobotMap::drivetrainSpikeBrake;
std::shared_ptr<DoubleSolenoid> RobotMap::drivetrainBrakeSol;
std::shared_ptr<AnalogInput> RobotMap::drivetrainUltra;
std::shared_ptr<SpeedController> RobotMap::rollerRollerMotor;
std::shared_ptr<DigitalInput> RobotMap::rollerDigitalInput1;
std::shared_ptr<DoubleSolenoid> RobotMap::wristWristDSol;
std::shared_ptr<Solenoid> RobotMap::catapultCatSol;
std::shared_ptr<SpeedController> RobotMap::catapultCatapultRetractor;
std::shared_ptr<AnalogInput> RobotMap::catapultCatPot;
std::shared_ptr<DigitalInput> RobotMap::catapultCatSwitch;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

std::shared_ptr<ADXRS450_Gyro> RobotMap::drivetrainGyro;

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    drivetrainLeftTop.reset(new Victor(5));
    lw->AddActuator("Drivetrain", "Left Top", std::static_pointer_cast<Victor>(drivetrainLeftTop));
    
    drivetrainLeftBottom.reset(new Victor(6));
    lw->AddActuator("Drivetrain", "Left Bottom", std::static_pointer_cast<Victor>(drivetrainLeftBottom));
    
    drivetrainRightTop.reset(new Victor(8));
    lw->AddActuator("Drivetrain", "Right Top", std::static_pointer_cast<Victor>(drivetrainRightTop));
    
    drivetrainRightBottom.reset(new Victor(9));
    lw->AddActuator("Drivetrain", "Right Bottom", std::static_pointer_cast<Victor>(drivetrainRightBottom));
    
    drivetrainRobotDrive.reset(new RobotDrive(drivetrainLeftTop, drivetrainLeftBottom,
              drivetrainRightTop, drivetrainRightBottom));
    
    drivetrainRobotDrive->SetSafetyEnabled(false);
        drivetrainRobotDrive->SetExpiration(0.1);
        drivetrainRobotDrive->SetSensitivity(0.5);
        drivetrainRobotDrive->SetMaxOutput(1.0);
        drivetrainRobotDrive->SetInvertedMotor(RobotDrive::kFrontLeftMotor, true);
        drivetrainRobotDrive->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);
        drivetrainRobotDrive->SetInvertedMotor(RobotDrive::kFrontRightMotor, true);
        drivetrainRobotDrive->SetInvertedMotor(RobotDrive::kRearRightMotor, true);
    drivetrainGyroUseless.reset(new AnalogGyro(1));
    lw->AddSensor("Drivetrain", "GyroUseless", drivetrainGyroUseless);
    drivetrainGyroUseless->SetSensitivity(0.007);
    drivetrainComp.reset(new Compressor(0));
    
    
    drivetrainSpikeBrake.reset(new Relay(0));
    lw->AddActuator("Drivetrain", "Spike Brake", drivetrainSpikeBrake);
    
    drivetrainBrakeSol.reset(new DoubleSolenoid(0, 5, 6));
    lw->AddActuator("Drivetrain", "Brake Sol", drivetrainBrakeSol);
    
    drivetrainUltra.reset(new AnalogInput(2));
    lw->AddSensor("Drivetrain", "Ultra", drivetrainUltra);
    
    rollerRollerMotor.reset(new Talon(0));
    lw->AddActuator("Roller", "Roller Motor", std::static_pointer_cast<Talon>(rollerRollerMotor));
    
    rollerDigitalInput1.reset(new DigitalInput(1));
    lw->AddSensor("Roller", "Digital Input 1", rollerDigitalInput1);
    
    wristWristDSol.reset(new DoubleSolenoid(0, 0, 1));
    lw->AddActuator("Wrist", "Wrist D Sol", wristWristDSol);
    
    catapultCatSol.reset(new Solenoid(0, 4));
    lw->AddActuator("Catapult", "Cat Sol", catapultCatSol);
    
    catapultCatapultRetractor.reset(new Talon(1));
    lw->AddActuator("Catapult", "Catapult Retractor", std::static_pointer_cast<Talon>(catapultCatapultRetractor));
    
    catapultCatPot.reset(new AnalogInput(0));
    lw->AddSensor("Catapult", "Cat Pot", catapultCatPot);
    
    catapultCatSwitch.reset(new DigitalInput(0));
    lw->AddSensor("Catapult", "Cat Switch", catapultCatSwitch);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    drivetrainGyro.reset(new ADXRS450_Gyro(SPI::Port::kOnboardCS0));
    lw->AddSensor("Drivetrain", "Gyro", drivetrainGyro);

}
