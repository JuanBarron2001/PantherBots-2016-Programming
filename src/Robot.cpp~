// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Drivetrain> Robot::drivetrain;
std::shared_ptr<Roller> Robot::roller;
std::shared_ptr<Wrist> Robot::wrist;
std::shared_ptr<Catapult> Robot::catapult;
std::shared_ptr<Cameras> Robot::cameras;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    drivetrain.reset(new Drivetrain());
    roller.reset(new Roller());
    wrist.reset(new Wrist());
    catapult.reset(new Catapult());
    cameras.reset(new Cameras());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// instantiate the command used for the autonomous period

	power = Robot::drivetrain->GetPower();
	kP = Robot::drivetrain->GetkP();
	AutoTime = Robot::drivetrain->GetAutoTime();
	TurnAngle = Robot::drivetrain->TurnAngle();


	AutoModes = new SendableChooser();
	AutoModes->AddObject("Straight Gyro Autonomous", new AutoDrive());
	//secondary, and hopeful superior autonomous code that can be implemented
	//AutoModes->AddObject("Superior Gyro Drive", new AutoDrive2());
	AutoModes->AddObject("Useless Autonomous", new AutonomousCommand());
	AutoModes->AddObject("Lowbar Autonomous", new BackwardsGyroAuto());
//	AutoModes->AddObject("Autonomous Shoot", new ShootAuto());
	AutoModes->AddObject("Low Goal Autonomous Pt 1", new LowGoalAutonomous());
	AutoModes->AddObject("Low Goal Autonomous Pt 2", new AutoDrive2);
	AutoModes->AddDefault("Low Goal Autonomous Full", new CommandGroup1());
	AutoModes->AddObject("Turn", new Turn());

	SmartDashboard::PutData("Autonomous Mode", AutoModes);
	SmartDashboard::PutNumber("kP", kP);
    SmartDashboard::PutNumber("AutoTime", AutoTime);
    SmartDashboard::PutNumber("Power", power);
    SmartDashboard::PutNumber("Turn Angle", TurnAngle);
    SmartDashboard::PutNumber("Gyro Angle", Robot::drivetrain->DisplayAngle());
    SmartDashboard::PutNumber("Pot Value", Robot::catapult->GetAverageVoltage());
    SmartDashboard::PutNumber("Auto Delay", Robot::drivetrain->GetDelay());
    SmartDashboard::PutNumber("Ultrasonic", Robot::drivetrain->GetDistance());

    SmartDashboard::PutString("Tower is", Robot::drivetrain->GetDirection());
    if(Robot::roller->DigiInput() == true)
    {
    	SmartDashboard::PutString("Ball State:", "Ball");
   	}
    else
   	{
   		SmartDashboard::PutString("Ball State:", "No Ball");
   	}
	/*SmartDashboard::PutNumber("1st Defense is", LowBar);
	SmartDashboard::PutNumber("2nd Defense is", Moat);*/
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit()
{
	autonomousCommand.reset((Command*) AutoModes->GetSelected());

	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
	SmartDashboard::PutNumber("kP", Robot::drivetrain->GetkP());
	SmartDashboard::PutNumber("AutoTime", Robot::drivetrain->GetAutoTime());
    SmartDashboard::PutNumber("Power", Robot::drivetrain->GetPower());
    SmartDashboard::PutNumber("Gyro Angle", Robot::drivetrain->DisplayAngle());
    SmartDashboard::PutNumber("Pot Value", Robot::catapult->GetAverageVoltage());
    SmartDashboard::PutNumber("Auto Delay", Robot::drivetrain->GetDelay());
    SmartDashboard::PutString("Tower is", Robot::drivetrain->GetDirection());
    if(Robot::roller->DigiInput() == true)
    {
   		SmartDashboard::PutString("Ball State:", "Ball");
   	}
   	else
   	{
   		SmartDashboard::PutString("Ball State:", "No Ball");
   	}
    SmartDashboard::PutNumber("Ultrasonic", Robot::drivetrain->GetDistance());
    SmartDashboard::PutNumber("Turn Angle", Robot::drivetrain->TurnAngle());
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
	SmartDashboard::PutNumber("kP", Robot::drivetrain->GetkP());
	SmartDashboard::PutNumber("AutoTime", Robot::drivetrain->GetAutoTime());
    SmartDashboard::PutNumber("Power", Robot::drivetrain->GetPower());
    SmartDashboard::PutNumber("Gyro Angle", Robot::drivetrain->DisplayAngle());
    SmartDashboard::PutNumber("Pot Value", Robot::catapult->GetAverageVoltage());
    SmartDashboard::PutNumber("Auto Delay", Robot::drivetrain->GetDelay());
    SmartDashboard::PutString("Tower is", Robot::drivetrain->GetDirection());
    if(Robot::roller->DigiInput() == true)
    {
   		SmartDashboard::PutString("Ball State:", "Ball");
   	}
   	else
   	{
   		SmartDashboard::PutString("Ball State:", "No Ball");
   	}
    SmartDashboard::PutNumber("Ultrasonic", Robot::drivetrain->GetDistance());
    SmartDashboard::PutNumber("Turn Angle", Robot::drivetrain->TurnAngle());
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);
