// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutoDrive.h"
#include "Commands/AutoDrive2.h"
#include "Commands/AutoSlack.h"
#include "Commands/AutoTight.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/BackwardGyroAssistedDrive.h"
#include "Commands/BackwardsGyroAuto.h"
#include "Commands/Brake.h"
#include "Commands/ChangeLight.h"
#include "Commands/ChangeWristPosition.h"
#include "Commands/CommandGroup1.h"
#include "Commands/Fire.h"
#include "Commands/GyroAssistedDrive.h"
#include "Commands/Intake.h"
#include "Commands/JoystickDrive.h"
#include "Commands/LowGoalAutonomous.h"
#include "Commands/Outtake.h"
#include "Commands/ShootAuto.h"
#include "Commands/Slack.h"
#include "Commands/SpyAuto.h"
#include "Commands/SwitchCams.h"
#include "Commands/Tight.h"
#include "Commands/Turn.h"
#include "Commands/UltraSonicAuto.h"
#include "Commands/Unbrake.h"
#include "Commands/UserIntake.h"
#include "Commands/WristDown.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    pad.reset(new Joystick(1));
    
    padButton9.reset(new JoystickButton(pad.get(), 5));
    padButton9->WhenPressed(new AutoTight());
    padButton8.reset(new JoystickButton(pad.get(), 4));
    padButton8->WhenPressed(new UserIntake());
    padButton7.reset(new JoystickButton(pad.get(), 8));
    padButton7->WhileHeld(new Slack());
    padButton6.reset(new JoystickButton(pad.get(), 7));
    padButton6->WhileHeld(new Tight());
    padButton5.reset(new JoystickButton(pad.get(), 6));
    padButton5->WhenPressed(new AutoSlack());
    padButton3.reset(new JoystickButton(pad.get(), 3));
    padButton3->WhileHeld(new Outtake());
    padButton2.reset(new JoystickButton(pad.get(), 2));
    padButton2->WhileHeld(new Intake());
    padButton1.reset(new JoystickButton(pad.get(), 1));
    padButton1->WhenPressed(new ChangeWristPosition());
    joy.reset(new Joystick(0));
    
    joyButton6.reset(new JoystickButton(joy.get(), 6));
    joyButton6->WhenPressed(new Unbrake());
    joyButton5.reset(new JoystickButton(joy.get(), 3));
    joyButton5->WhileHeld(new BackwardGyroAssistedDrive());
    joyButton4.reset(new JoystickButton(joy.get(), 4));
    joyButton4->WhenPressed(new Brake());
    joyButton3.reset(new JoystickButton(joy.get(), 5));
    joyButton3->WhenPressed(new ChangeLight());
    joyButton2.reset(new JoystickButton(joy.get(), 2));
    joyButton2->WhileHeld(new GyroAssistedDrive());
    joyButton1.reset(new JoystickButton(joy.get(), 1));
    joyButton1->WhenPressed(new Fire());

    // SmartDashboard Buttons
    SmartDashboard::PutData("Wrist Down", new WristDown());
    SmartDashboard::PutData("Turn", new Turn());
    SmartDashboard::PutData("Command Group 1", new CommandGroup1());
    SmartDashboard::PutData("UltraSonic Auto", new UltraSonicAuto());
    SmartDashboard::PutData("Low Goal Autonomous", new LowGoalAutonomous());
    SmartDashboard::PutData("Unbrake", new Unbrake());
    SmartDashboard::PutData("Spy Auto", new SpyAuto());
    SmartDashboard::PutData("Shoot Auto", new ShootAuto());
    SmartDashboard::PutData("Backwards Gyro Auto", new BackwardsGyroAuto());
    SmartDashboard::PutData("Backward Gyro Assisted Drive", new BackwardGyroAssistedDrive());
    SmartDashboard::PutData("Auto Tight", new AutoTight());
    SmartDashboard::PutData("Auto Slack", new AutoSlack());
    SmartDashboard::PutData("Change Light", new ChangeLight());
    SmartDashboard::PutData("User Intake", new UserIntake());
    SmartDashboard::PutData("Slack", new Slack());
    SmartDashboard::PutData("Tight", new Tight());
    SmartDashboard::PutData("Brake", new Brake());
    SmartDashboard::PutData("Auto Drive 2", new AutoDrive2());
    SmartDashboard::PutData("Outtake", new Outtake());
    SmartDashboard::PutData("Intake", new Intake());
    SmartDashboard::PutData("Gyro Assisted Drive", new GyroAssistedDrive());
    SmartDashboard::PutData("Auto Drive", new AutoDrive());
    SmartDashboard::PutData("Switch Cams", new SwitchCams());
    SmartDashboard::PutData("Fire", new Fire());
    SmartDashboard::PutData("Change Wrist Position", new ChangeWristPosition());
    SmartDashboard::PutData("Joystick Drive", new JoystickDrive());
    SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
     *
     */
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getJoy() {
   return joy;
}

std::shared_ptr<Joystick> OI::getPad() {
   return pad;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
