// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef DRIVETRAIN_H
#define DRIVETRAIN_H
#include "Commands/Subsystem.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Drivetrain: public Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<SpeedController> leftTop;
	std::shared_ptr<SpeedController> leftBottom;
	std::shared_ptr<SpeedController> rightTop;
	std::shared_ptr<SpeedController> rightBottom;
	std::shared_ptr<RobotDrive> robotDrive;
	std::shared_ptr<AnalogGyro> gyroUseless;
	std::shared_ptr<Compressor> comp;
	std::shared_ptr<Relay> spikeBrake;
	std::shared_ptr<DoubleSolenoid> brakeSol;
	std::shared_ptr<AnalogInput> ultra;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	std::shared_ptr<ADXRS450_Gyro> gyro;
	std::shared_ptr<Relay> Spike;

	double drive_x;
	double drive_y;

	//int LowBar;
	//int Moat;

	/*double power;
	double kP;
	double AutoTime;*/

public:
	Drivetrain();
	void InitDefaultCommand();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	void AutoGyroDrive(double, double);
	double GetPower();
	double GetkP();
	double GetAutoTime();
	double GetDelay();
	std::string GetDirection();
	double TurnAngle();

	void JoyDrive(std::shared_ptr<Joystick>);

	void ForwardJoyDrive(std::shared_ptr<Joystick>);

	void BackwardJoyDrive(std::shared_ptr<Joystick>);

	void Stop();

	double DisplayAngle();

	//"ultimate function"
	void CrossTwoDefenses(double, double, double, std::string);

	void EndGame();

	void NotEndGame();

	void Light();

	void LightOff();

	void ResetGyro();

	double GetDistance();

	bool DriveState();

	void BackwardsAuto(double, double);

	void TurnFun(std::string, double);

	bool GetPos();


	bool LightState;
	bool DriveStateBool;
	double power;
	double kP;
	double AutoTime;
	double Delay;
	std::string TowerPos;
	double turnAngle;

	bool pos;
};

#endif
