// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Roller.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Roller::Roller() : Subsystem("Roller") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    rollerMotor = RobotMap::rollerRollerMotor;
    digitalInput1 = RobotMap::rollerDigitalInput1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    if(DigiInput() == false)
    {
    	SmartDashboard::PutString("Ball State:", "No Ball");
    }
    else
    {
    	SmartDashboard::PutString("Ball State:", "Ball");
    }
}

void Roller::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

//spit out the ball
void Roller::Suck()
{
	rollerMotor->Set(.900);
}

//sucks in the ball
void Roller::Spit()
{
	rollerMotor->Set(-.900);
}

//stop the roller
void Roller::Stop()
{
	rollerMotor->Set(0.0);
}

//find and return what the digital input state is
bool Roller::DigiInput()
{
	return !(digitalInput1->Get());
}
