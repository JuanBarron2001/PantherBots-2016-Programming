// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Cameras.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Cameras::Cameras() : Subsystem("Cameras") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	CameraState = false;

	//start up the basic seeing camera
	Sight();

	/*
	frame = imaqCreateImage(IMAQ_IMAGE_RGB, 0);
	//the camera name (ex "cam0") can be found through the roborio web interface
	imaqError = IMAQdxOpenCamera("cam1", IMAQdxCameraControlModeController, &cam1);
	if(imaqError != IMAQdxErrorSuccess)
	{
		DriverStation::ReportError("IMAQdxOpenCamera error: " + std::to_string((long)imaqError) + "\n");
	}
	imaqError = IMAQdxConfigureGrab(cam1);
	if(imaqError != IMAQdxErrorSuccess)
	{
		DriverStation::ReportError("IMAQdxConfigureGrab error: " + std::to_string((long)imaqError) + "\n");
	}
	*/
}

void Cameras::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Cameras::Sight()
{
	CameraServer::GetInstance()->SetQuality(50);
	CameraServer::GetInstance()->StartAutomaticCapture("cam1");
}
/*
void Cameras::ChangeCameras()
{
	if(CameraState == true)
	{
		CameraState = !CameraState;
	}
	else
	{
		Sight();
		CameraState = !CameraState;
	}
}
*/
void Cameras::VisionGRIP()
{
	/* Run GRIP in a new process */
	if (fork() == 0)
	{
		system("/home/lvuser/grip &");
	}

	 auto grip = NetworkTable::GetTable("grip");

	 /* Get published values from GRIP using NetworkTables */
	 auto areas = grip->GetNumberArray("targets/area", llvm::ArrayRef<double>());

     for (auto area : areas)
     {
    	 std::cout << "Got contour with area=" << area << std::endl;
	 }
}
