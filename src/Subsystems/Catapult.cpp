// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Catapult.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Catapult::Catapult() : Subsystem("Catapult") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    catSol = RobotMap::catapultCatSol;
    catapultRetractor = RobotMap::catapultCatapultRetractor;
    catPot = RobotMap::catapultCatPot;
    catSwitch = RobotMap::catapultCatSwitch;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    catSol->Set(false);

    fire = false;

}

void Catapult::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Catapult::Shoot()
{
	if(fire == false)
	{
		fire = !fire;
	}

	catSol->Set(fire);

	fire = !fire;
}
//If it is true pish pish turns on
void Catapult::Retract()
{
	/*
	if(catSwitch->Get() == true)
	{
		catapultRetractor->Set(.5);
	}
	*/
	//catapultRetractor->Set(1.000);

}
//The catapult returns back
void Catapult::STOP()
{
	fire = false;
	catSol->Set(fire);
	catapultRetractor->Set(0);	//sets catapult motor to 0 to stop it
}
//Catapult returns back
double Catapult::GetAverageVoltage()
{
	return catPot->GetAverageVoltage();	//gets voltage to determine slack and tight
}

void Catapult::Backward()
{
	catapultRetractor->Set(-1.000);
}

void Catapult::Forward()
{
	catapultRetractor->Set(1.000);
}
